import {assert} from '@webex/test-helper-chai';
import sinon from 'sinon';
import Transcription from '@webex/plugin-meetings/src/transcription';

describe('transcription index', () => {
  let webSocketUrl, members, sessionId, token, transcription;

  beforeEach(() => {
    webSocketUrl = 'ws://webSocketUrl';
    members = {
      membersCollection: {
        members: {
          member1: {
            participant: {
              status: {
                csis: [1, 2, 3]
              }
            }
          }
        }
      }
    };
    sessionId = 'sessionId';
    token = 'token';
    transcription = new Transcription(webSocketUrl, members, sessionId, token);
  });


  it('open websocket connection', async () => {
    await transcription.connect();
    transcription.webSocket.onopen = sinon.stub();

    assert.equal(transcription.webSocket.OPEN, 1);
  });

  it('get current speaker', () => {
    const isSpeaking = transcription.getSpeaker([1, 4, 5]);

    assert.equal(isSpeaking, members.membersCollection.members.member1);
  });

  it('get current speaker', () => {
    const isSpeaking = transcription.getSpeaker([1, 4, 5]);

    assert.equal(isSpeaking, members.membersCollection.members.member1);
  });

  it('disconnect() shuold close the socket', async () => {
    await transcription.connect();
    transcription.disconnect();

    assert.equal(transcription.webSocket.CLOSED, 3);
  });
});
